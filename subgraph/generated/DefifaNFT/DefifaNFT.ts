// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddTier extends ethereum.Event {
  get params(): AddTier__Params {
    return new AddTier__Params(this);
  }
}

export class AddTier__Params {
  _event: AddTier;

  constructor(event: AddTier) {
    this._event = event;
  }

  get tierId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data(): AddTierDataStruct {
    return changetype<AddTierDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AddTierDataStruct extends ethereum.Tuple {
  get contributionFloor(): BigInt {
    return this[0].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[1].toBigInt();
  }

  get initialQuantity(): BigInt {
    return this[2].toBigInt();
  }

  get votingUnits(): i32 {
    return this[3].toI32();
  }

  get reservedRate(): i32 {
    return this[4].toI32();
  }

  get reservedTokenBeneficiary(): Address {
    return this[5].toAddress();
  }

  get encodedIPFSUri(): Bytes {
    return this[6].toBytes();
  }

  get allowManualMint(): boolean {
    return this[7].toBoolean();
  }

  get shouldUseBeneficiaryAsDefault(): boolean {
    return this[8].toBoolean();
  }

  get transfersPausable(): boolean {
    return this[9].toBoolean();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get totalAmountContributed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MintReservedToken extends ethereum.Event {
  get params(): MintReservedToken__Params {
    return new MintReservedToken__Params(this);
  }
}

export class MintReservedToken__Params {
  _event: MintReservedToken;

  constructor(event: MintReservedToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tierId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveTier extends ethereum.Event {
  get params(): RemoveTier__Params {
    return new RemoveTier__Params(this);
  }
}

export class RemoveTier__Params {
  _event: RemoveTier;

  constructor(event: RemoveTier) {
    this._event = event;
  }

  get tierId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetBaseUri extends ethereum.Event {
  get params(): SetBaseUri__Params {
    return new SetBaseUri__Params(this);
  }
}

export class SetBaseUri__Params {
  _event: SetBaseUri;

  constructor(event: SetBaseUri) {
    this._event = event;
  }

  get baseUri(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetContractUri extends ethereum.Event {
  get params(): SetContractUri__Params {
    return new SetContractUri__Params(this);
  }
}

export class SetContractUri__Params {
  _event: SetContractUri;

  constructor(event: SetContractUri) {
    this._event = event;
  }

  get contractUri(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetDefaultReservedTokenBeneficiary extends ethereum.Event {
  get params(): SetDefaultReservedTokenBeneficiary__Params {
    return new SetDefaultReservedTokenBeneficiary__Params(this);
  }
}

export class SetDefaultReservedTokenBeneficiary__Params {
  _event: SetDefaultReservedTokenBeneficiary;

  constructor(event: SetDefaultReservedTokenBeneficiary) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetTokenUriResolver extends ethereum.Event {
  get params(): SetTokenUriResolver__Params {
    return new SetTokenUriResolver__Params(this);
  }
}

export class SetTokenUriResolver__Params {
  _event: SetTokenUriResolver;

  constructor(event: SetTokenUriResolver) {
    this._event = event;
  }

  get newResolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TierDelegateChanged extends ethereum.Event {
  get params(): TierDelegateChanged__Params {
    return new TierDelegateChanged__Params(this);
  }
}

export class TierDelegateChanged__Params {
  _event: TierDelegateChanged;

  constructor(event: TierDelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tierId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class TierDelegateVotesChanged extends ethereum.Event {
  get params(): TierDelegateVotesChanged__Params {
    return new TierDelegateVotesChanged__Params(this);
  }
}

export class TierDelegateVotesChanged__Params {
  _event: TierDelegateVotesChanged;

  constructor(event: TierDelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tierId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get callre(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DefifaNFT__payParamsResultDelegateAllocationsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class DefifaNFT__payParamsResult {
  value0: BigInt;
  value1: string;
  value2: Array<DefifaNFT__payParamsResultDelegateAllocationsStruct>;

  constructor(
    value0: BigInt,
    value1: string,
    value2: Array<DefifaNFT__payParamsResultDelegateAllocationsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    return map;
  }

  getWeight(): BigInt {
    return this.value0;
  }

  getMemo(): string {
    return this.value1;
  }

  getDelegateAllocations(): Array<
    DefifaNFT__payParamsResultDelegateAllocationsStruct
  > {
    return this.value2;
  }
}

export class DefifaNFT__payParamsInput_dataStruct extends ethereum.Tuple {
  get terminal(): Address {
    return this[0].toAddress();
  }

  get payer(): Address {
    return this[1].toAddress();
  }

  get amount(): DefifaNFT__payParamsInput_dataAmountStruct {
    return changetype<DefifaNFT__payParamsInput_dataAmountStruct>(
      this[2].toTuple()
    );
  }

  get projectId(): BigInt {
    return this[3].toBigInt();
  }

  get currentFundingCycleConfiguration(): BigInt {
    return this[4].toBigInt();
  }

  get beneficiary(): Address {
    return this[5].toAddress();
  }

  get weight(): BigInt {
    return this[6].toBigInt();
  }

  get reservedRate(): BigInt {
    return this[7].toBigInt();
  }

  get memo(): string {
    return this[8].toString();
  }

  get metadata(): Bytes {
    return this[9].toBytes();
  }
}

export class DefifaNFT__payParamsInput_dataAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class DefifaNFT__redeemParamsResultDelegateAllocationsStruct extends ethereum.Tuple {
  get delegate(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class DefifaNFT__redeemParamsResult {
  value0: BigInt;
  value1: string;
  value2: Array<DefifaNFT__redeemParamsResultDelegateAllocationsStruct>;

  constructor(
    value0: BigInt,
    value1: string,
    value2: Array<DefifaNFT__redeemParamsResultDelegateAllocationsStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    return map;
  }

  getReclaimAmount(): BigInt {
    return this.value0;
  }

  getMemo(): string {
    return this.value1;
  }

  getDelegateAllocations(): Array<
    DefifaNFT__redeemParamsResultDelegateAllocationsStruct
  > {
    return this.value2;
  }
}

export class DefifaNFT__redeemParamsInput_dataStruct extends ethereum.Tuple {
  get terminal(): Address {
    return this[0].toAddress();
  }

  get holder(): Address {
    return this[1].toAddress();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get currentFundingCycleConfiguration(): BigInt {
    return this[3].toBigInt();
  }

  get tokenCount(): BigInt {
    return this[4].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[5].toBigInt();
  }

  get overflow(): BigInt {
    return this[6].toBigInt();
  }

  get reclaimAmount(): DefifaNFT__redeemParamsInput_dataReclaimAmountStruct {
    return changetype<DefifaNFT__redeemParamsInput_dataReclaimAmountStruct>(
      this[7].toTuple()
    );
  }

  get useTotalOverflow(): boolean {
    return this[8].toBoolean();
  }

  get redemptionRate(): BigInt {
    return this[9].toBigInt();
  }

  get memo(): string {
    return this[10].toString();
  }

  get metadata(): Bytes {
    return this[11].toBytes();
  }
}

export class DefifaNFT__redeemParamsInput_dataReclaimAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class DefifaNFT extends ethereum.SmartContract {
  static bind(address: Address): DefifaNFT {
    return new DefifaNFT("DefifaNFT", address);
  }

  END_GAME_PHASE(): BigInt {
    let result = super.call("END_GAME_PHASE", "END_GAME_PHASE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_END_GAME_PHASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "END_GAME_PHASE",
      "END_GAME_PHASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_GAME_PHASE(): BigInt {
    let result = super.call(
      "MINT_GAME_PHASE",
      "MINT_GAME_PHASE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINT_GAME_PHASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINT_GAME_PHASE",
      "MINT_GAME_PHASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_REDEMPTION_WEIGHT(): BigInt {
    let result = super.call(
      "TOTAL_REDEMPTION_WEIGHT",
      "TOTAL_REDEMPTION_WEIGHT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_REDEMPTION_WEIGHT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_REDEMPTION_WEIGHT",
      "TOTAL_REDEMPTION_WEIGHT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  codeOrigin(): Address {
    let result = super.call("codeOrigin", "codeOrigin():(address)", []);

    return result[0].toAddress();
  }

  try_codeOrigin(): ethereum.CallResult<Address> {
    let result = super.tryCall("codeOrigin", "codeOrigin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creditsOf(param0: Address): BigInt {
    let result = super.call("creditsOf", "creditsOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_creditsOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creditsOf", "creditsOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  directory(): Address {
    let result = super.call("directory", "directory():(address)", []);

    return result[0].toAddress();
  }

  try_directory(): ethereum.CallResult<Address> {
    let result = super.tryCall("directory", "directory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  firstOwnerOf(_tokenId: BigInt): Address {
    let result = super.call("firstOwnerOf", "firstOwnerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_firstOwnerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "firstOwnerOf",
      "firstOwnerOf(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundingCycleStore(): Address {
    let result = super.call(
      "fundingCycleStore",
      "fundingCycleStore():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fundingCycleStore(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingCycleStore",
      "fundingCycleStore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastTierTotalVotes(_tier: BigInt, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastTierTotalVotes",
      "getPastTierTotalVotes(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tier),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastTierTotalVotes(
    _tier: BigInt,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTierTotalVotes",
      "getPastTierTotalVotes(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tier),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastTierVotes(
    _account: Address,
    _tier: BigInt,
    _blockNumber: BigInt
  ): BigInt {
    let result = super.call(
      "getPastTierVotes",
      "getPastTierVotes(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastTierVotes(
    _account: Address,
    _tier: BigInt,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTierVotes",
      "getPastTierVotes(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierDelegate(_account: Address, _tier: BigInt): Address {
    let result = super.call(
      "getTierDelegate",
      "getTierDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier)
      ]
    );

    return result[0].toAddress();
  }

  try_getTierDelegate(
    _account: Address,
    _tier: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTierDelegate",
      "getTierDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTierTotalVotes(_tier: BigInt): BigInt {
    let result = super.call(
      "getTierTotalVotes",
      "getTierTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tier)]
    );

    return result[0].toBigInt();
  }

  try_getTierTotalVotes(_tier: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierTotalVotes",
      "getTierTotalVotes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tier)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTierVotes(_account: Address, _tier: BigInt): BigInt {
    let result = super.call(
      "getTierVotes",
      "getTierVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTierVotes(
    _account: Address,
    _tier: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTierVotes",
      "getTierVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_tier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintFor(_tierIds: Array<i32>, _beneficiary: Address): Array<BigInt> {
    let result = super.call(
      "mintFor",
      "mintFor(uint16[],address):(uint256[])",
      [
        ethereum.Value.fromI32Array(_tierIds),
        ethereum.Value.fromAddress(_beneficiary)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_mintFor(
    _tierIds: Array<i32>,
    _beneficiary: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "mintFor",
      "mintFor(uint16[],address):(uint256[])",
      [
        ethereum.Value.fromI32Array(_tierIds),
        ethereum.Value.fromAddress(_beneficiary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payParams(
    _data: DefifaNFT__payParamsInput_dataStruct
  ): DefifaNFT__payParamsResult {
    let result = super.call(
      "payParams",
      "payParams((address,address,(address,uint256,uint256,uint256),uint256,uint256,address,uint256,uint256,string,bytes)):(uint256,string,(address,uint256)[])",
      [ethereum.Value.fromTuple(_data)]
    );

    return new DefifaNFT__payParamsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toTupleArray<
        DefifaNFT__payParamsResultDelegateAllocationsStruct
      >()
    );
  }

  try_payParams(
    _data: DefifaNFT__payParamsInput_dataStruct
  ): ethereum.CallResult<DefifaNFT__payParamsResult> {
    let result = super.tryCall(
      "payParams",
      "payParams((address,address,(address,uint256,uint256,uint256),uint256,uint256,address,uint256,uint256,string,bytes)):(uint256,string,(address,uint256)[])",
      [ethereum.Value.fromTuple(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DefifaNFT__payParamsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toTupleArray<
          DefifaNFT__payParamsResultDelegateAllocationsStruct
        >()
      )
    );
  }

  prices(): Address {
    let result = super.call("prices", "prices():(address)", []);

    return result[0].toAddress();
  }

  try_prices(): ethereum.CallResult<Address> {
    let result = super.tryCall("prices", "prices():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pricingCurrency(): BigInt {
    let result = super.call(
      "pricingCurrency",
      "pricingCurrency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pricingCurrency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricingCurrency",
      "pricingCurrency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricingDecimals(): BigInt {
    let result = super.call(
      "pricingDecimals",
      "pricingDecimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pricingDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricingDecimals",
      "pricingDecimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectId(): BigInt {
    let result = super.call("projectId", "projectId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_projectId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("projectId", "projectId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemParams(
    _data: DefifaNFT__redeemParamsInput_dataStruct
  ): DefifaNFT__redeemParamsResult {
    let result = super.call(
      "redeemParams",
      "redeemParams((address,address,uint256,uint256,uint256,uint256,uint256,(address,uint256,uint256,uint256),bool,uint256,string,bytes)):(uint256,string,(address,uint256)[])",
      [ethereum.Value.fromTuple(_data)]
    );

    return new DefifaNFT__redeemParamsResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toTupleArray<
        DefifaNFT__redeemParamsResultDelegateAllocationsStruct
      >()
    );
  }

  try_redeemParams(
    _data: DefifaNFT__redeemParamsInput_dataStruct
  ): ethereum.CallResult<DefifaNFT__redeemParamsResult> {
    let result = super.tryCall(
      "redeemParams",
      "redeemParams((address,address,uint256,uint256,uint256,uint256,uint256,(address,uint256,uint256,uint256),bool,uint256,string,bytes)):(uint256,string,(address,uint256)[])",
      [ethereum.Value.fromTuple(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DefifaNFT__redeemParamsResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toTupleArray<
          DefifaNFT__redeemParamsResultDelegateAllocationsStruct
        >()
      )
    );
  }

  store(): Address {
    let result = super.call("store", "store():(address)", []);

    return result[0].toAddress();
  }

  try_store(): ethereum.CallResult<Address> {
    let result = super.tryCall("store", "store():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tierRedemptionWeights(): Array<BigInt> {
    let result = super.call(
      "tierRedemptionWeights",
      "tierRedemptionWeights():(uint256[100])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_tierRedemptionWeights(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tierRedemptionWeights",
      "tierRedemptionWeights():(uint256[100])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AdjustTiersCall extends ethereum.Call {
  get inputs(): AdjustTiersCall__Inputs {
    return new AdjustTiersCall__Inputs(this);
  }

  get outputs(): AdjustTiersCall__Outputs {
    return new AdjustTiersCall__Outputs(this);
  }
}

export class AdjustTiersCall__Inputs {
  _call: AdjustTiersCall;

  constructor(call: AdjustTiersCall) {
    this._call = call;
  }

  get _tiersToAdd(): Array<AdjustTiersCall_tiersToAddStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AdjustTiersCall_tiersToAddStruct
    >();
  }

  get _tierIdsToRemove(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class AdjustTiersCall__Outputs {
  _call: AdjustTiersCall;

  constructor(call: AdjustTiersCall) {
    this._call = call;
  }
}

export class AdjustTiersCall_tiersToAddStruct extends ethereum.Tuple {
  get contributionFloor(): BigInt {
    return this[0].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[1].toBigInt();
  }

  get initialQuantity(): BigInt {
    return this[2].toBigInt();
  }

  get votingUnits(): i32 {
    return this[3].toI32();
  }

  get reservedRate(): i32 {
    return this[4].toI32();
  }

  get reservedTokenBeneficiary(): Address {
    return this[5].toAddress();
  }

  get encodedIPFSUri(): Bytes {
    return this[6].toBytes();
  }

  get allowManualMint(): boolean {
    return this[7].toBoolean();
  }

  get shouldUseBeneficiaryAsDefault(): boolean {
    return this[8].toBoolean();
  }

  get transfersPausable(): boolean {
    return this[9].toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DidPayCall extends ethereum.Call {
  get inputs(): DidPayCall__Inputs {
    return new DidPayCall__Inputs(this);
  }

  get outputs(): DidPayCall__Outputs {
    return new DidPayCall__Outputs(this);
  }
}

export class DidPayCall__Inputs {
  _call: DidPayCall;

  constructor(call: DidPayCall) {
    this._call = call;
  }

  get _data(): DidPayCall_dataStruct {
    return changetype<DidPayCall_dataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DidPayCall__Outputs {
  _call: DidPayCall;

  constructor(call: DidPayCall) {
    this._call = call;
  }
}

export class DidPayCall_dataStruct extends ethereum.Tuple {
  get payer(): Address {
    return this[0].toAddress();
  }

  get projectId(): BigInt {
    return this[1].toBigInt();
  }

  get currentFundingCycleConfiguration(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): DidPayCall_dataAmountStruct {
    return changetype<DidPayCall_dataAmountStruct>(this[3].toTuple());
  }

  get forwardedAmount(): DidPayCall_dataForwardedAmountStruct {
    return changetype<DidPayCall_dataForwardedAmountStruct>(this[4].toTuple());
  }

  get projectTokenCount(): BigInt {
    return this[5].toBigInt();
  }

  get beneficiary(): Address {
    return this[6].toAddress();
  }

  get preferClaimedTokens(): boolean {
    return this[7].toBoolean();
  }

  get memo(): string {
    return this[8].toString();
  }

  get metadata(): Bytes {
    return this[9].toBytes();
  }
}

export class DidPayCall_dataAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class DidPayCall_dataForwardedAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class DidRedeemCall extends ethereum.Call {
  get inputs(): DidRedeemCall__Inputs {
    return new DidRedeemCall__Inputs(this);
  }

  get outputs(): DidRedeemCall__Outputs {
    return new DidRedeemCall__Outputs(this);
  }
}

export class DidRedeemCall__Inputs {
  _call: DidRedeemCall;

  constructor(call: DidRedeemCall) {
    this._call = call;
  }

  get _data(): DidRedeemCall_dataStruct {
    return changetype<DidRedeemCall_dataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DidRedeemCall__Outputs {
  _call: DidRedeemCall;

  constructor(call: DidRedeemCall) {
    this._call = call;
  }
}

export class DidRedeemCall_dataStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get projectId(): BigInt {
    return this[1].toBigInt();
  }

  get currentFundingCycleConfiguration(): BigInt {
    return this[2].toBigInt();
  }

  get projectTokenCount(): BigInt {
    return this[3].toBigInt();
  }

  get reclaimedAmount(): DidRedeemCall_dataReclaimedAmountStruct {
    return changetype<DidRedeemCall_dataReclaimedAmountStruct>(
      this[4].toTuple()
    );
  }

  get forwardedAmount(): DidRedeemCall_dataForwardedAmountStruct {
    return changetype<DidRedeemCall_dataForwardedAmountStruct>(
      this[5].toTuple()
    );
  }

  get beneficiary(): Address {
    return this[6].toAddress();
  }

  get memo(): string {
    return this[7].toString();
  }

  get metadata(): Bytes {
    return this[8].toBytes();
  }
}

export class DidRedeemCall_dataReclaimedAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class DidRedeemCall_dataForwardedAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _directory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _fundingCycleStore(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _baseUri(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _tokenUriResolver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _contractUri(): string {
    return this._call.inputValues[7].value.toString();
  }

  get _pricing(): InitializeCall_pricingStruct {
    return changetype<InitializeCall_pricingStruct>(
      this._call.inputValues[8].value.toTuple()
    );
  }

  get _store(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _flags(): InitializeCall_flagsStruct {
    return changetype<InitializeCall_flagsStruct>(
      this._call.inputValues[10].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_pricingStruct extends ethereum.Tuple {
  get tiers(): Array<InitializeCall_pricingTiersStruct> {
    return this[0].toTupleArray<InitializeCall_pricingTiersStruct>();
  }

  get currency(): BigInt {
    return this[1].toBigInt();
  }

  get decimals(): BigInt {
    return this[2].toBigInt();
  }

  get prices(): Address {
    return this[3].toAddress();
  }
}

export class InitializeCall_pricingTiersStruct extends ethereum.Tuple {
  get contributionFloor(): BigInt {
    return this[0].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[1].toBigInt();
  }

  get initialQuantity(): BigInt {
    return this[2].toBigInt();
  }

  get votingUnits(): i32 {
    return this[3].toI32();
  }

  get reservedRate(): i32 {
    return this[4].toI32();
  }

  get reservedTokenBeneficiary(): Address {
    return this[5].toAddress();
  }

  get encodedIPFSUri(): Bytes {
    return this[6].toBytes();
  }

  get allowManualMint(): boolean {
    return this[7].toBoolean();
  }

  get shouldUseBeneficiaryAsDefault(): boolean {
    return this[8].toBoolean();
  }

  get transfersPausable(): boolean {
    return this[9].toBoolean();
  }
}

export class InitializeCall_flagsStruct extends ethereum.Tuple {
  get lockReservedTokenChanges(): boolean {
    return this[0].toBoolean();
  }

  get lockVotingUnitChanges(): boolean {
    return this[1].toBoolean();
  }

  get lockManualMintingChanges(): boolean {
    return this[2].toBoolean();
  }
}

export class MintForCall extends ethereum.Call {
  get inputs(): MintForCall__Inputs {
    return new MintForCall__Inputs(this);
  }

  get outputs(): MintForCall__Outputs {
    return new MintForCall__Outputs(this);
  }
}

export class MintForCall__Inputs {
  _call: MintForCall;

  constructor(call: MintForCall) {
    this._call = call;
  }

  get _mintForTiersData(): Array<MintForCall_mintForTiersDataStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MintForCall_mintForTiersDataStruct
    >();
  }
}

export class MintForCall__Outputs {
  _call: MintForCall;

  constructor(call: MintForCall) {
    this._call = call;
  }
}

export class MintForCall_mintForTiersDataStruct extends ethereum.Tuple {
  get tierIds(): Array<i32> {
    return this[0].toI32Array();
  }

  get beneficiary(): Address {
    return this[1].toAddress();
  }
}

export class MintFor1Call extends ethereum.Call {
  get inputs(): MintFor1Call__Inputs {
    return new MintFor1Call__Inputs(this);
  }

  get outputs(): MintFor1Call__Outputs {
    return new MintFor1Call__Outputs(this);
  }
}

export class MintFor1Call__Inputs {
  _call: MintFor1Call;

  constructor(call: MintFor1Call) {
    this._call = call;
  }

  get _tierIds(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintFor1Call__Outputs {
  _call: MintFor1Call;

  constructor(call: MintFor1Call) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class MintReservesForCall extends ethereum.Call {
  get inputs(): MintReservesForCall__Inputs {
    return new MintReservesForCall__Inputs(this);
  }

  get outputs(): MintReservesForCall__Outputs {
    return new MintReservesForCall__Outputs(this);
  }
}

export class MintReservesForCall__Inputs {
  _call: MintReservesForCall;

  constructor(call: MintReservesForCall) {
    this._call = call;
  }

  get _mintReservesForTiersData(): Array<
    MintReservesForCall_mintReservesForTiersDataStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      MintReservesForCall_mintReservesForTiersDataStruct
    >();
  }
}

export class MintReservesForCall__Outputs {
  _call: MintReservesForCall;

  constructor(call: MintReservesForCall) {
    this._call = call;
  }
}

export class MintReservesForCall_mintReservesForTiersDataStruct extends ethereum.Tuple {
  get tierId(): BigInt {
    return this[0].toBigInt();
  }

  get count(): BigInt {
    return this[1].toBigInt();
  }
}

export class MintReservesFor1Call extends ethereum.Call {
  get inputs(): MintReservesFor1Call__Inputs {
    return new MintReservesFor1Call__Inputs(this);
  }

  get outputs(): MintReservesFor1Call__Outputs {
    return new MintReservesFor1Call__Outputs(this);
  }
}

export class MintReservesFor1Call__Inputs {
  _call: MintReservesFor1Call;

  constructor(call: MintReservesFor1Call) {
    this._call = call;
  }

  get _tierId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintReservesFor1Call__Outputs {
  _call: MintReservesFor1Call;

  constructor(call: MintReservesFor1Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseUriCall extends ethereum.Call {
  get inputs(): SetBaseUriCall__Inputs {
    return new SetBaseUriCall__Inputs(this);
  }

  get outputs(): SetBaseUriCall__Outputs {
    return new SetBaseUriCall__Outputs(this);
  }
}

export class SetBaseUriCall__Inputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }

  get _baseUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseUriCall__Outputs {
  _call: SetBaseUriCall;

  constructor(call: SetBaseUriCall) {
    this._call = call;
  }
}

export class SetContractUriCall extends ethereum.Call {
  get inputs(): SetContractUriCall__Inputs {
    return new SetContractUriCall__Inputs(this);
  }

  get outputs(): SetContractUriCall__Outputs {
    return new SetContractUriCall__Outputs(this);
  }
}

export class SetContractUriCall__Inputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }

  get _contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractUriCall__Outputs {
  _call: SetContractUriCall;

  constructor(call: SetContractUriCall) {
    this._call = call;
  }
}

export class SetDefaultReservedTokenBeneficiaryCall extends ethereum.Call {
  get inputs(): SetDefaultReservedTokenBeneficiaryCall__Inputs {
    return new SetDefaultReservedTokenBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetDefaultReservedTokenBeneficiaryCall__Outputs {
    return new SetDefaultReservedTokenBeneficiaryCall__Outputs(this);
  }
}

export class SetDefaultReservedTokenBeneficiaryCall__Inputs {
  _call: SetDefaultReservedTokenBeneficiaryCall;

  constructor(call: SetDefaultReservedTokenBeneficiaryCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefaultReservedTokenBeneficiaryCall__Outputs {
  _call: SetDefaultReservedTokenBeneficiaryCall;

  constructor(call: SetDefaultReservedTokenBeneficiaryCall) {
    this._call = call;
  }
}

export class SetTierDelegateCall extends ethereum.Call {
  get inputs(): SetTierDelegateCall__Inputs {
    return new SetTierDelegateCall__Inputs(this);
  }

  get outputs(): SetTierDelegateCall__Outputs {
    return new SetTierDelegateCall__Outputs(this);
  }
}

export class SetTierDelegateCall__Inputs {
  _call: SetTierDelegateCall;

  constructor(call: SetTierDelegateCall) {
    this._call = call;
  }

  get _delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tierId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTierDelegateCall__Outputs {
  _call: SetTierDelegateCall;

  constructor(call: SetTierDelegateCall) {
    this._call = call;
  }
}

export class SetTierDelegatesCall extends ethereum.Call {
  get inputs(): SetTierDelegatesCall__Inputs {
    return new SetTierDelegatesCall__Inputs(this);
  }

  get outputs(): SetTierDelegatesCall__Outputs {
    return new SetTierDelegatesCall__Outputs(this);
  }
}

export class SetTierDelegatesCall__Inputs {
  _call: SetTierDelegatesCall;

  constructor(call: SetTierDelegatesCall) {
    this._call = call;
  }

  get _setTierDelegatesData(): Array<
    SetTierDelegatesCall_setTierDelegatesDataStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      SetTierDelegatesCall_setTierDelegatesDataStruct
    >();
  }
}

export class SetTierDelegatesCall__Outputs {
  _call: SetTierDelegatesCall;

  constructor(call: SetTierDelegatesCall) {
    this._call = call;
  }
}

export class SetTierDelegatesCall_setTierDelegatesDataStruct extends ethereum.Tuple {
  get delegatee(): Address {
    return this[0].toAddress();
  }

  get tierId(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetTierRedemptionWeightsCall extends ethereum.Call {
  get inputs(): SetTierRedemptionWeightsCall__Inputs {
    return new SetTierRedemptionWeightsCall__Inputs(this);
  }

  get outputs(): SetTierRedemptionWeightsCall__Outputs {
    return new SetTierRedemptionWeightsCall__Outputs(this);
  }
}

export class SetTierRedemptionWeightsCall__Inputs {
  _call: SetTierRedemptionWeightsCall;

  constructor(call: SetTierRedemptionWeightsCall) {
    this._call = call;
  }

  get _tierWeights(): Array<SetTierRedemptionWeightsCall_tierWeightsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetTierRedemptionWeightsCall_tierWeightsStruct
    >();
  }
}

export class SetTierRedemptionWeightsCall__Outputs {
  _call: SetTierRedemptionWeightsCall;

  constructor(call: SetTierRedemptionWeightsCall) {
    this._call = call;
  }
}

export class SetTierRedemptionWeightsCall_tierWeightsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get redemptionWeight(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetTokenUriResolverCall extends ethereum.Call {
  get inputs(): SetTokenUriResolverCall__Inputs {
    return new SetTokenUriResolverCall__Inputs(this);
  }

  get outputs(): SetTokenUriResolverCall__Outputs {
    return new SetTokenUriResolverCall__Outputs(this);
  }
}

export class SetTokenUriResolverCall__Inputs {
  _call: SetTokenUriResolverCall;

  constructor(call: SetTokenUriResolverCall) {
    this._call = call;
  }

  get _tokenUriResolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenUriResolverCall__Outputs {
  _call: SetTokenUriResolverCall;

  constructor(call: SetTokenUriResolverCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
